# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: all-stack CI

on:
  push:
    branches: [ "master" ]
env:
  IMAGE_NAME: all-stack
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  testing:
     runs-on: ubuntu-latest
     outputs:
        get-job-id-test: ${{steps.job-id-test.outputs.get-job-id-test-out}}

     strategy:
         fail-fast: true
        # matrix:
        #  node-version: [18.6]

     steps:
    
     - uses: actions/checkout@v1
     - name: Use Node.js
       uses: actions/setup-node@v1
       with:
        node-version:  '18.6'
     - run: exet 1
     - name: Test angular
       run: |
        npm install
        npm run test -- --watch=false --browsers=ChromeHeadless
       working-directory: angular
     - name: Test react
       run: |
        npm install
        cp src/app.js src/App.js
        npm run test -- --watch=false --browsers=ChromeHeadless
       working-directory: react
     - name: Get Current ID Job 
       uses: Tiryoh/gha-jobid-action@v0
       id: get-job-id-test
       with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          job_name: ${{github.job}}
          per_page: 30
     - id: job-id-test
       run: echo "::set-output name=get-job-id-test-out::${{steps.get-job-id-test.outputs.job_id}}"
  
  build_push:
    needs: [testing]
    runs-on: ubuntu-latest
    outputs:
        get-job-id-build: ${{steps.job-id-build.outputs.get-job-id-build}}

    strategy:
      fail-fast: true
    steps:
    - name: Get Current ID Job 
      uses: Tiryoh/gha-jobid-action@v0
      id: get-job-id-build
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        job_name: build_push
        per_page: 30
    - run: echo ${{steps.get-job-id-test.outputs.job_id}}
    - id: job-id-build
      run: echo "::set-output name=get-job-id-build::${{steps.get-job-id-build.outputs.job_id}}"
    - uses: actions/checkout@v1
    - name: Use Node.js 
      uses: actions/setup-node@v1
      with:
        node-version: '18.6'
    - name: Build angular
      run: |
        npm install
        npm run build --if-present
      working-directory: angular
    - name: Build react
      run: | 
        npm install
        npm run build --if-present
      working-directory: react
    - name: Login to GitHub Container Registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
    - name: Build a container image from our angular and react app using Docker
      run: docker build -t $IMAGE_NAME .
    - name: Tag & publish to GitHub Container Registry
      run: |
           IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
           VERSION=latest
           docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
           docker push $IMAGE_ID:$VERSION
           
  notification:
    needs: [testing, build_push]
    if: ${{ always() }}

    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
    - name: get Time started test job
      run: |
       gh api \
       -H "Accept: application/vnd.github+json" \
       /repos/frayme/angular-react-starter/check-runs/${{needs.testing.outputs.get-job-id-test}} --jq '.started_at' > start_test.txt
       echo "started_time_test=$(cat start_test.txt)" >> $GITHUB_ENV
    - name: get Time finish test job
      run: |
       gh api \
       -H "Accept: application/vnd.github+json" \
       /repos/frayme/angular-react-starter/check-runs/${{needs.testing.outputs.get-job-id-test}} --jq '.completed_at' > finish_test.txt
       echo "finished_time_test=$(cat finish_test.txt)" >> $GITHUB_ENV
     #
    - name: get Time started build job
      run: |
       gh api \
       -H "Accept: application/vnd.github+json" \
       /repos/frayme/angular-react-starter/check-runs/${{needs.build_push.outputs.get-job-id-build}} --jq '.started_at' > start_build.txt
       echo "started_time_build=$(cat start_build.txt)" >> $GITHUB_ENV
    - name: get Time finish build job
      run: |
       gh api \
       -H "Accept: application/vnd.github+json" \
       /repos/frayme/angular-react-starter/check-runs/${{needs.build_push.outputs.get-job-id-build}} --jq '.completed_at' > finish_build.txt
       echo "finished_time_build=$(cat finish_build.txt)" >> $GITHUB_ENV
    - name: Send mail
      if: ${{ failure() }}
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{secrets.MAIL_USERNAME}}
    # App password for from google acc.
        password: ${{secrets.MAIL_PASSWORD}}
    # email subject
        subject: ${{ github.job }} job of ${{ github.repository }} has ${{ job.status }}
    # email body as text
        body: Testing job in workflow ${{ github.workflow }} of ${{ github.repository }} has result ${{ needs.testing.result }}.
         Build and Push job in workflow ${{ github.workflow }} of ${{ github.repository }} has result ${{ needs.build_push.result }}.
    #  send email to
        to: prutkov.work@gmail.com
    # from email name
        from: ${{ github.repository_owner }}
        
    - name: Send mail
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{secrets.MAIL_USERNAME}}
    # App password for from google acc.
        password: ${{secrets.MAIL_PASSWORD}}
    # email subject
        subject: ${{ github.job }} job of ${{ github.repository }} has ${{ job.status }}
    # email body as text
        body: Testing job in workflow ${{ github.workflow }} of ${{ github.repository }} has result ${{ needs.testing.result }}. ${{ needs.test.outputs.get-github-job }} started at ${{ env.started_time_test }} and finished at ${{ env.finished_time_test }}.
         Build and Push job in workflow ${{ github.workflow }} of ${{ github.repository }} has result ${{ needs.build_push.result }}. ${{ needs.build_push.outputs.get-github-job }} started at ${{ env.started_time_build }} and finished at ${{ env.finished_time_build }}.
    #  send email to
        to: prutkov.work@gmail.com
    # from email name
        from: ${{ github.repository_owner }}


